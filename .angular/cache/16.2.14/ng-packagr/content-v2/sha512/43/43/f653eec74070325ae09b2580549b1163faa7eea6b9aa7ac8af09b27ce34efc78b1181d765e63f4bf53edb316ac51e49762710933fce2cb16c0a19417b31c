{"hash":"9e7e0f666b0257906a39de63cfae528f33d14bb9","fesm2022":[{"exports":["NgChatbotAngularComponent","NgChatbotAngularModule"],"facadeModuleId":"C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\ng-chatbot-angular.mjs","isDynamicEntry":false,"isEntry":true,"isImplicitEntry":false,"moduleIds":["C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\lib\\ng-chatbot-angular.component.mjs","C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\lib\\ng-chatbot-angular.module.mjs","C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\public-api.mjs","C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\ng-chatbot-angular.mjs"],"name":"ng-chatbot-angular","type":"chunk","dynamicImports":[],"fileName":"ng-chatbot-angular.mjs","implicitlyLoadedBefore":[],"importedBindings":{"@angular/core":["EventEmitter","*","Component","ViewChild","Input","Output","NgModule"],"@angular/common":["*","CommonModule"],"@angular/forms":["*","FormsModule"],"@angular/platform-browser":["BrowserModule"]},"imports":["@angular/core","@angular/common","@angular/forms","@angular/platform-browser"],"modules":{"C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\lib\\ng-chatbot-angular.component.mjs":{"code":"class NgChatbotAngularComponent {\n    constructor() {\n        this.onMessageInput = new EventEmitter();\n        this.messages = [];\n        this.userMessage = '';\n        this.isModalActive = false;\n        this.isBotActive = false;\n        this.isButtonVisible = true;\n    }\n    set serverResponse(value) {\n        this.addServerResponse(value);\n    }\n    ngOnInit() {\n        this.messages = [];\n    }\n    showDialog() {\n        this.isModalActive = true;\n        this.isButtonVisible = false;\n        let modal_t = document.getElementById('chat_modal');\n        modal_t?.classList.remove('hidden-chat');\n        modal_t?.classList.add('show-chat');\n    }\n    closeDialog() {\n        this.isModalActive = false;\n        this.isButtonVisible = true;\n        let modal_t = document.getElementById('chat_modal');\n        modal_t?.classList.remove('show-chat');\n        modal_t?.classList.add('hidden-chat');\n    }\n    pushData() {\n        if (this.userMessage.trim() !== '') {\n            this.onMessage(this.userMessage);\n            this.messages.push({ type: 'user', message: this.userMessage });\n            this.userMessage = '';\n            this.isBotActive = true;\n            this.scrollToBottom(); // Add this line to scroll to bottom after adding user message\n        }\n    }\n    addServerResponse(serverResponse) {\n        const newMessage = { type: 'bot', message: serverResponse, loading: true };\n        this.messages.push(newMessage);\n        this.isBotActive = false;\n        this.scrollToBottom(); // Add this line to scroll to bottom after adding server response\n        setTimeout(() => {\n            newMessage.loading = false;\n            this.scrollToBottom();\n        }, 1000);\n    }\n    scrollToBottom() {\n        try {\n            setTimeout(() => {\n                if (this.myScrollContainer) {\n                    const scrollContainer = this.myScrollContainer.nativeElement;\n                    scrollContainer.scrollTop = scrollContainer.scrollHeight;\n                    scrollContainer.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"nearest\" });\n                }\n            }, 100);\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n    onMessage(date) {\n        this.onMessageInput.emit(date.trim());\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgChatbotAngularComponent, selector: \"ng-chatbot-angular\", inputs: { chatConfig: \"chatConfig\", serverResponse: \"serverResponse\" }, outputs: { onMessageInput: \"onMessageInput\" }, viewQueries: [{ propertyName: \"myScrollContainer\", first: true, predicate: [\"autoScroll\"], descendants: true, static: true }], ngImport: i0, template: \"<section class=\\\"noselect container\\\">\\r\\n  <div id=\\\"chat_modal\\\" class=\\\"hidden-chat\\\">\\r\\n    <div class=\\\"chat\\\">\\r\\n      <div chatConfig class=\\\"chat-header\\\" *ngIf=\\\"chatConfig && (chatConfig.title || chatConfig.subTitle)\\\">\\r\\n        <div class=\\\"chat-icon\\\">\\r\\n          <i class=\\\"fa fa-user-circle-o\\\" aria-hidden=\\\"true\\\"></i>\\r\\n        </div>\\r\\n        <p class=\\\"title\\\" *ngIf=\\\"chatConfig.title\\\">{{ chatConfig.title }}</p>\\r\\n        <p class=\\\"sub-title\\\" *ngIf=\\\"chatConfig.subTitle\\\">{{ chatConfig.subTitle }}</p>\\r\\n        <span (click)=\\\"closeDialog()\\\" class=\\\"close-chat\\\">\\r\\n          <i class=\\\"fa fa-times\\\"></i>\\r\\n        </span>\\r\\n      </div>\\r\\n      <div #autoScroll class=\\\"messages-content\\\">\\r\\n        <div *ngFor=\\\"let msg of messages\\\">\\r\\n          <label [ngClass]=\\\"msg.type == 'user' ? 'user-msg' : 'bot-msg'\\\">\\r\\n            {{ msg.message }}\\r\\n          </label>\\r\\n        </div>\\r\\n        <div class=\\\"chat-typing\\\" *ngIf=\\\"isBotActive\\\">\\r\\n          <div class=\\\"chat-typing--bubbles\\\">\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"message-footer\\\">\\r\\n        <div class=\\\"message-box\\\">\\r\\n          <input type=\\\"text\\\" (keydown.enter)=\\\"pushData()\\\" [(ngModel)]=\\\"userMessage\\\" class=\\\"message-input\\\" placeholder=\\\"Type message...\\\" />\\r\\n          <div type=\\\"submit\\\" class=\\\"noselect message-submit\\\" (click)=\\\"pushData()\\\">\\r\\n            <i class=\\\"fa fa-paper-plane\\\"></i>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"float-buton-group noselect\\\" *ngIf=\\\"isButtonVisible\\\">\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"!isModalActive\\\" (click)=\\\"showDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-comment\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"isModalActive\\\" (click)=\\\"closeDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-times-circle\\\"></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\", styles: [\".show-chat{display:block}.hidden-chat{display:none}.container{display:flex;flex-direction:column;position:relative;margin:30px;overflow:hidden}.message-footer{position:absolute;bottom:0;left:0;width:100%;padding:10px;background-color:#f9f9f9;border-top:1px solid #ccc;box-sizing:border-box}.float-icon{margin-top:17px}.float-button{height:50px;width:50px;float:right;border-radius:50%;text-align:center;background-color:#1e90ff;color:#fff;box-shadow:2px 2px 3px #999;cursor:pointer}.float-buton-group{margin-top:5px}.chat{width:400px;height:calc(80vh - 60px);max-height:500px;z-index:2;overflow-y:auto;box-shadow:0 5px 30px #0003;border-radius:20px;display:flex;flex-direction:column}.chat-header{flex:0 1 25px;position:relative;z-index:2;background:#1e90ff;color:#fff;text-transform:uppercase;text-align:left;padding:10px 0 9px 15px}.chat-header .title,.chat-header .sub-title{font-weight:500;font-size:14px;margin:0;padding:0;font-family:sans-serif}.chat-header .sub-title{color:#fff;font-size:10px;letter-spacing:1px;margin-top:5px}.chat-icon{position:absolute;left:15px}.chat-icon i{margin-top:3px;font-size:20px;color:#fff}.messages-content{margin-bottom:60px}.message-box{padding:10px;position:relative}.message-box .message-input{background:none;border:none;outline:none!important;resize:none;color:#000;font-size:14px;height:17px;margin:0;padding-right:20px;width:calc(100% - 80px);box-sizing:border-box}.message-box textarea:focus::-webkit-placeholder{color:transparent}.message-box .message-submit{position:absolute;top:50%;right:10px;transform:translateY(-50%);color:#fff;border:none;background:#1e90ff;font-size:10px;text-transform:uppercase;line-height:1;padding:6px 10px;border-radius:10px;cursor:pointer}.message-box .message-submit:hover{background:#1e90ff}.close-chat{position:absolute;top:15px;right:15px;color:#fff;cursor:pointer}.user-msg,.bot-msg{max-width:calc(100% - 20px);margin-top:10px;margin-left:10px;background-color:#1e90ff;color:#fff;padding:8px 12px;border-radius:15px;font-family:sans-serif;font-size:15px;overflow-wrap:break-word}.bot-msg{float:left}.user-msg{float:right}.chat-typing{margin:10px 0 0 10px;float:left;padding-bottom:10px}.chat-typing--bubbles span{display:inline-block;background-color:#b6b5ba;width:10px;height:10px;border-radius:100%;margin-right:5px;animation:bob 2s infinite}.chat-typing--bubbles span:nth-child(1){animation-delay:-1s}.chat-typing--bubbles span:nth-child(2){animation-delay:-.85s}.chat-typing--bubbles span:nth-child(3){animation-delay:-.7s;margin-right:0}@keyframes bob{10%{transform:translateY(-10px);background-color:#9e9da2}50%{transform:translateY(0);background-color:#b6b5ba}}::-webkit-scrollbar{width:5px}::-webkit-scrollbar-track{background:#888;border-radius:5px}::-webkit-scrollbar-thumb{background:#504e4e;border-radius:5px}::-webkit-scrollbar-thumb:hover{background:#555;border-radius:5px}.noselect{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng-chatbot-angular', template: \"<section class=\\\"noselect container\\\">\\r\\n  <div id=\\\"chat_modal\\\" class=\\\"hidden-chat\\\">\\r\\n    <div class=\\\"chat\\\">\\r\\n      <div chatConfig class=\\\"chat-header\\\" *ngIf=\\\"chatConfig && (chatConfig.title || chatConfig.subTitle)\\\">\\r\\n        <div class=\\\"chat-icon\\\">\\r\\n          <i class=\\\"fa fa-user-circle-o\\\" aria-hidden=\\\"true\\\"></i>\\r\\n        </div>\\r\\n        <p class=\\\"title\\\" *ngIf=\\\"chatConfig.title\\\">{{ chatConfig.title }}</p>\\r\\n        <p class=\\\"sub-title\\\" *ngIf=\\\"chatConfig.subTitle\\\">{{ chatConfig.subTitle }}</p>\\r\\n        <span (click)=\\\"closeDialog()\\\" class=\\\"close-chat\\\">\\r\\n          <i class=\\\"fa fa-times\\\"></i>\\r\\n        </span>\\r\\n      </div>\\r\\n      <div #autoScroll class=\\\"messages-content\\\">\\r\\n        <div *ngFor=\\\"let msg of messages\\\">\\r\\n          <label [ngClass]=\\\"msg.type == 'user' ? 'user-msg' : 'bot-msg'\\\">\\r\\n            {{ msg.message }}\\r\\n          </label>\\r\\n        </div>\\r\\n        <div class=\\\"chat-typing\\\" *ngIf=\\\"isBotActive\\\">\\r\\n          <div class=\\\"chat-typing--bubbles\\\">\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"message-footer\\\">\\r\\n        <div class=\\\"message-box\\\">\\r\\n          <input type=\\\"text\\\" (keydown.enter)=\\\"pushData()\\\" [(ngModel)]=\\\"userMessage\\\" class=\\\"message-input\\\" placeholder=\\\"Type message...\\\" />\\r\\n          <div type=\\\"submit\\\" class=\\\"noselect message-submit\\\" (click)=\\\"pushData()\\\">\\r\\n            <i class=\\\"fa fa-paper-plane\\\"></i>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"float-buton-group noselect\\\" *ngIf=\\\"isButtonVisible\\\">\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"!isModalActive\\\" (click)=\\\"showDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-comment\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"isModalActive\\\" (click)=\\\"closeDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-times-circle\\\"></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\", styles: [\".show-chat{display:block}.hidden-chat{display:none}.container{display:flex;flex-direction:column;position:relative;margin:30px;overflow:hidden}.message-footer{position:absolute;bottom:0;left:0;width:100%;padding:10px;background-color:#f9f9f9;border-top:1px solid #ccc;box-sizing:border-box}.float-icon{margin-top:17px}.float-button{height:50px;width:50px;float:right;border-radius:50%;text-align:center;background-color:#1e90ff;color:#fff;box-shadow:2px 2px 3px #999;cursor:pointer}.float-buton-group{margin-top:5px}.chat{width:400px;height:calc(80vh - 60px);max-height:500px;z-index:2;overflow-y:auto;box-shadow:0 5px 30px #0003;border-radius:20px;display:flex;flex-direction:column}.chat-header{flex:0 1 25px;position:relative;z-index:2;background:#1e90ff;color:#fff;text-transform:uppercase;text-align:left;padding:10px 0 9px 15px}.chat-header .title,.chat-header .sub-title{font-weight:500;font-size:14px;margin:0;padding:0;font-family:sans-serif}.chat-header .sub-title{color:#fff;font-size:10px;letter-spacing:1px;margin-top:5px}.chat-icon{position:absolute;left:15px}.chat-icon i{margin-top:3px;font-size:20px;color:#fff}.messages-content{margin-bottom:60px}.message-box{padding:10px;position:relative}.message-box .message-input{background:none;border:none;outline:none!important;resize:none;color:#000;font-size:14px;height:17px;margin:0;padding-right:20px;width:calc(100% - 80px);box-sizing:border-box}.message-box textarea:focus::-webkit-placeholder{color:transparent}.message-box .message-submit{position:absolute;top:50%;right:10px;transform:translateY(-50%);color:#fff;border:none;background:#1e90ff;font-size:10px;text-transform:uppercase;line-height:1;padding:6px 10px;border-radius:10px;cursor:pointer}.message-box .message-submit:hover{background:#1e90ff}.close-chat{position:absolute;top:15px;right:15px;color:#fff;cursor:pointer}.user-msg,.bot-msg{max-width:calc(100% - 20px);margin-top:10px;margin-left:10px;background-color:#1e90ff;color:#fff;padding:8px 12px;border-radius:15px;font-family:sans-serif;font-size:15px;overflow-wrap:break-word}.bot-msg{float:left}.user-msg{float:right}.chat-typing{margin:10px 0 0 10px;float:left;padding-bottom:10px}.chat-typing--bubbles span{display:inline-block;background-color:#b6b5ba;width:10px;height:10px;border-radius:100%;margin-right:5px;animation:bob 2s infinite}.chat-typing--bubbles span:nth-child(1){animation-delay:-1s}.chat-typing--bubbles span:nth-child(2){animation-delay:-.85s}.chat-typing--bubbles span:nth-child(3){animation-delay:-.7s;margin-right:0}@keyframes bob{10%{transform:translateY(-10px);background-color:#9e9da2}50%{transform:translateY(0);background-color:#b6b5ba}}::-webkit-scrollbar{width:5px}::-webkit-scrollbar-track{background:#888;border-radius:5px}::-webkit-scrollbar-thumb{background:#504e4e;border-radius:5px}::-webkit-scrollbar-thumb:hover{background:#555;border-radius:5px}.noselect{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}\\n\"] }]\n        }], propDecorators: { myScrollContainer: [{\n                type: ViewChild,\n                args: ['autoScroll', { static: true }]\n            }], chatConfig: [{\n                type: Input\n            }], serverResponse: [{\n                type: Input\n            }], onMessageInput: [{\n                type: Output\n            }] } });","originalLength":24839,"removedExports":[],"renderedExports":["NgChatbotAngularComponent"],"renderedLength":14464},"C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\lib\\ng-chatbot-angular.module.mjs":{"code":"class NgChatbotAngularModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularModule, declarations: [NgChatbotAngularComponent], imports: [CommonModule,\n            BrowserModule,\n            FormsModule], exports: [NgChatbotAngularComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularModule, imports: [CommonModule,\n            BrowserModule,\n            FormsModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgChatbotAngularComponent],\n                    imports: [\n                        CommonModule,\n                        BrowserModule,\n                        FormsModule\n                    ],\n                    exports: [NgChatbotAngularComponent]\n                }]\n        }] });","originalLength":3287,"removedExports":[],"renderedExports":["NgChatbotAngularModule"],"renderedLength":1237},"C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\public-api.mjs":{"code":"/*\n * Public API Surface of ng-chatbot-angular\n */","originalLength":815,"removedExports":[],"renderedExports":[],"renderedLength":50},"C:\\Users\\DEll\\Desktop\\ng-chatbot-angular\\dist\\ng-chatbot-angular\\esm2022\\ng-chatbot-angular.mjs":{"code":"/**\n * Generated bundle index. Do not edit.\n */","originalLength":528,"removedExports":[],"renderedExports":[],"renderedLength":47}},"referencedFiles":[],"code":"import * as i0 from '@angular/core';\nimport { EventEmitter, Component, ViewChild, Input, Output, NgModule } from '@angular/core';\nimport * as i1 from '@angular/common';\nimport { CommonModule } from '@angular/common';\nimport * as i2 from '@angular/forms';\nimport { FormsModule } from '@angular/forms';\nimport { BrowserModule } from '@angular/platform-browser';\n\nclass NgChatbotAngularComponent {\n    constructor() {\n        this.onMessageInput = new EventEmitter();\n        this.messages = [];\n        this.userMessage = '';\n        this.isModalActive = false;\n        this.isBotActive = false;\n        this.isButtonVisible = true;\n    }\n    set serverResponse(value) {\n        this.addServerResponse(value);\n    }\n    ngOnInit() {\n        this.messages = [];\n    }\n    showDialog() {\n        this.isModalActive = true;\n        this.isButtonVisible = false;\n        let modal_t = document.getElementById('chat_modal');\n        modal_t?.classList.remove('hidden-chat');\n        modal_t?.classList.add('show-chat');\n    }\n    closeDialog() {\n        this.isModalActive = false;\n        this.isButtonVisible = true;\n        let modal_t = document.getElementById('chat_modal');\n        modal_t?.classList.remove('show-chat');\n        modal_t?.classList.add('hidden-chat');\n    }\n    pushData() {\n        if (this.userMessage.trim() !== '') {\n            this.onMessage(this.userMessage);\n            this.messages.push({ type: 'user', message: this.userMessage });\n            this.userMessage = '';\n            this.isBotActive = true;\n            this.scrollToBottom(); // Add this line to scroll to bottom after adding user message\n        }\n    }\n    addServerResponse(serverResponse) {\n        const newMessage = { type: 'bot', message: serverResponse, loading: true };\n        this.messages.push(newMessage);\n        this.isBotActive = false;\n        this.scrollToBottom(); // Add this line to scroll to bottom after adding server response\n        setTimeout(() => {\n            newMessage.loading = false;\n            this.scrollToBottom();\n        }, 1000);\n    }\n    scrollToBottom() {\n        try {\n            setTimeout(() => {\n                if (this.myScrollContainer) {\n                    const scrollContainer = this.myScrollContainer.nativeElement;\n                    scrollContainer.scrollTop = scrollContainer.scrollHeight;\n                    scrollContainer.scrollIntoView({ behavior: \"smooth\", block: \"end\", inline: \"nearest\" });\n                }\n            }, 100);\n        }\n        catch (err) {\n            console.error(err);\n        }\n    }\n    onMessage(date) {\n        this.onMessageInput.emit(date.trim());\n    }\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularComponent, deps: [], target: i0.ɵɵFactoryTarget.Component }); }\n    static { this.ɵcmp = i0.ɵɵngDeclareComponent({ minVersion: \"14.0.0\", version: \"16.2.12\", type: NgChatbotAngularComponent, selector: \"ng-chatbot-angular\", inputs: { chatConfig: \"chatConfig\", serverResponse: \"serverResponse\" }, outputs: { onMessageInput: \"onMessageInput\" }, viewQueries: [{ propertyName: \"myScrollContainer\", first: true, predicate: [\"autoScroll\"], descendants: true, static: true }], ngImport: i0, template: \"<section class=\\\"noselect container\\\">\\r\\n  <div id=\\\"chat_modal\\\" class=\\\"hidden-chat\\\">\\r\\n    <div class=\\\"chat\\\">\\r\\n      <div chatConfig class=\\\"chat-header\\\" *ngIf=\\\"chatConfig && (chatConfig.title || chatConfig.subTitle)\\\">\\r\\n        <div class=\\\"chat-icon\\\">\\r\\n          <i class=\\\"fa fa-user-circle-o\\\" aria-hidden=\\\"true\\\"></i>\\r\\n        </div>\\r\\n        <p class=\\\"title\\\" *ngIf=\\\"chatConfig.title\\\">{{ chatConfig.title }}</p>\\r\\n        <p class=\\\"sub-title\\\" *ngIf=\\\"chatConfig.subTitle\\\">{{ chatConfig.subTitle }}</p>\\r\\n        <span (click)=\\\"closeDialog()\\\" class=\\\"close-chat\\\">\\r\\n          <i class=\\\"fa fa-times\\\"></i>\\r\\n        </span>\\r\\n      </div>\\r\\n      <div #autoScroll class=\\\"messages-content\\\">\\r\\n        <div *ngFor=\\\"let msg of messages\\\">\\r\\n          <label [ngClass]=\\\"msg.type == 'user' ? 'user-msg' : 'bot-msg'\\\">\\r\\n            {{ msg.message }}\\r\\n          </label>\\r\\n        </div>\\r\\n        <div class=\\\"chat-typing\\\" *ngIf=\\\"isBotActive\\\">\\r\\n          <div class=\\\"chat-typing--bubbles\\\">\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"message-footer\\\">\\r\\n        <div class=\\\"message-box\\\">\\r\\n          <input type=\\\"text\\\" (keydown.enter)=\\\"pushData()\\\" [(ngModel)]=\\\"userMessage\\\" class=\\\"message-input\\\" placeholder=\\\"Type message...\\\" />\\r\\n          <div type=\\\"submit\\\" class=\\\"noselect message-submit\\\" (click)=\\\"pushData()\\\">\\r\\n            <i class=\\\"fa fa-paper-plane\\\"></i>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"float-buton-group noselect\\\" *ngIf=\\\"isButtonVisible\\\">\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"!isModalActive\\\" (click)=\\\"showDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-comment\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"isModalActive\\\" (click)=\\\"closeDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-times-circle\\\"></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\", styles: [\".show-chat{display:block}.hidden-chat{display:none}.container{display:flex;flex-direction:column;position:relative;margin:30px;overflow:hidden}.message-footer{position:absolute;bottom:0;left:0;width:100%;padding:10px;background-color:#f9f9f9;border-top:1px solid #ccc;box-sizing:border-box}.float-icon{margin-top:17px}.float-button{height:50px;width:50px;float:right;border-radius:50%;text-align:center;background-color:#1e90ff;color:#fff;box-shadow:2px 2px 3px #999;cursor:pointer}.float-buton-group{margin-top:5px}.chat{width:400px;height:calc(80vh - 60px);max-height:500px;z-index:2;overflow-y:auto;box-shadow:0 5px 30px #0003;border-radius:20px;display:flex;flex-direction:column}.chat-header{flex:0 1 25px;position:relative;z-index:2;background:#1e90ff;color:#fff;text-transform:uppercase;text-align:left;padding:10px 0 9px 15px}.chat-header .title,.chat-header .sub-title{font-weight:500;font-size:14px;margin:0;padding:0;font-family:sans-serif}.chat-header .sub-title{color:#fff;font-size:10px;letter-spacing:1px;margin-top:5px}.chat-icon{position:absolute;left:15px}.chat-icon i{margin-top:3px;font-size:20px;color:#fff}.messages-content{margin-bottom:60px}.message-box{padding:10px;position:relative}.message-box .message-input{background:none;border:none;outline:none!important;resize:none;color:#000;font-size:14px;height:17px;margin:0;padding-right:20px;width:calc(100% - 80px);box-sizing:border-box}.message-box textarea:focus::-webkit-placeholder{color:transparent}.message-box .message-submit{position:absolute;top:50%;right:10px;transform:translateY(-50%);color:#fff;border:none;background:#1e90ff;font-size:10px;text-transform:uppercase;line-height:1;padding:6px 10px;border-radius:10px;cursor:pointer}.message-box .message-submit:hover{background:#1e90ff}.close-chat{position:absolute;top:15px;right:15px;color:#fff;cursor:pointer}.user-msg,.bot-msg{max-width:calc(100% - 20px);margin-top:10px;margin-left:10px;background-color:#1e90ff;color:#fff;padding:8px 12px;border-radius:15px;font-family:sans-serif;font-size:15px;overflow-wrap:break-word}.bot-msg{float:left}.user-msg{float:right}.chat-typing{margin:10px 0 0 10px;float:left;padding-bottom:10px}.chat-typing--bubbles span{display:inline-block;background-color:#b6b5ba;width:10px;height:10px;border-radius:100%;margin-right:5px;animation:bob 2s infinite}.chat-typing--bubbles span:nth-child(1){animation-delay:-1s}.chat-typing--bubbles span:nth-child(2){animation-delay:-.85s}.chat-typing--bubbles span:nth-child(3){animation-delay:-.7s;margin-right:0}@keyframes bob{10%{transform:translateY(-10px);background-color:#9e9da2}50%{transform:translateY(0);background-color:#b6b5ba}}::-webkit-scrollbar{width:5px}::-webkit-scrollbar-track{background:#888;border-radius:5px}::-webkit-scrollbar-thumb{background:#504e4e;border-radius:5px}::-webkit-scrollbar-thumb:hover{background:#555;border-radius:5px}.noselect{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}\\n\"], dependencies: [{ kind: \"directive\", type: i1.NgClass, selector: \"[ngClass]\", inputs: [\"class\", \"ngClass\"] }, { kind: \"directive\", type: i1.NgForOf, selector: \"[ngFor][ngForOf]\", inputs: [\"ngForOf\", \"ngForTrackBy\", \"ngForTemplate\"] }, { kind: \"directive\", type: i1.NgIf, selector: \"[ngIf]\", inputs: [\"ngIf\", \"ngIfThen\", \"ngIfElse\"] }, { kind: \"directive\", type: i2.DefaultValueAccessor, selector: \"input:not([type=checkbox])[formControlName],textarea[formControlName],input:not([type=checkbox])[formControl],textarea[formControl],input:not([type=checkbox])[ngModel],textarea[ngModel],[ngDefaultControl]\" }, { kind: \"directive\", type: i2.NgControlStatus, selector: \"[formControlName],[ngModel],[formControl]\" }, { kind: \"directive\", type: i2.NgModel, selector: \"[ngModel]:not([formControlName]):not([formControl])\", inputs: [\"name\", \"disabled\", \"ngModel\", \"ngModelOptions\"], outputs: [\"ngModelChange\"], exportAs: [\"ngModel\"] }] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularComponent, decorators: [{\n            type: Component,\n            args: [{ selector: 'ng-chatbot-angular', template: \"<section class=\\\"noselect container\\\">\\r\\n  <div id=\\\"chat_modal\\\" class=\\\"hidden-chat\\\">\\r\\n    <div class=\\\"chat\\\">\\r\\n      <div chatConfig class=\\\"chat-header\\\" *ngIf=\\\"chatConfig && (chatConfig.title || chatConfig.subTitle)\\\">\\r\\n        <div class=\\\"chat-icon\\\">\\r\\n          <i class=\\\"fa fa-user-circle-o\\\" aria-hidden=\\\"true\\\"></i>\\r\\n        </div>\\r\\n        <p class=\\\"title\\\" *ngIf=\\\"chatConfig.title\\\">{{ chatConfig.title }}</p>\\r\\n        <p class=\\\"sub-title\\\" *ngIf=\\\"chatConfig.subTitle\\\">{{ chatConfig.subTitle }}</p>\\r\\n        <span (click)=\\\"closeDialog()\\\" class=\\\"close-chat\\\">\\r\\n          <i class=\\\"fa fa-times\\\"></i>\\r\\n        </span>\\r\\n      </div>\\r\\n      <div #autoScroll class=\\\"messages-content\\\">\\r\\n        <div *ngFor=\\\"let msg of messages\\\">\\r\\n          <label [ngClass]=\\\"msg.type == 'user' ? 'user-msg' : 'bot-msg'\\\">\\r\\n            {{ msg.message }}\\r\\n          </label>\\r\\n        </div>\\r\\n        <div class=\\\"chat-typing\\\" *ngIf=\\\"isBotActive\\\">\\r\\n          <div class=\\\"chat-typing--bubbles\\\">\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"message-footer\\\">\\r\\n        <div class=\\\"message-box\\\">\\r\\n          <input type=\\\"text\\\" (keydown.enter)=\\\"pushData()\\\" [(ngModel)]=\\\"userMessage\\\" class=\\\"message-input\\\" placeholder=\\\"Type message...\\\" />\\r\\n          <div type=\\\"submit\\\" class=\\\"noselect message-submit\\\" (click)=\\\"pushData()\\\">\\r\\n            <i class=\\\"fa fa-paper-plane\\\"></i>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"float-buton-group noselect\\\" *ngIf=\\\"isButtonVisible\\\">\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"!isModalActive\\\" (click)=\\\"showDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-comment\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"isModalActive\\\" (click)=\\\"closeDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-times-circle\\\"></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\", styles: [\".show-chat{display:block}.hidden-chat{display:none}.container{display:flex;flex-direction:column;position:relative;margin:30px;overflow:hidden}.message-footer{position:absolute;bottom:0;left:0;width:100%;padding:10px;background-color:#f9f9f9;border-top:1px solid #ccc;box-sizing:border-box}.float-icon{margin-top:17px}.float-button{height:50px;width:50px;float:right;border-radius:50%;text-align:center;background-color:#1e90ff;color:#fff;box-shadow:2px 2px 3px #999;cursor:pointer}.float-buton-group{margin-top:5px}.chat{width:400px;height:calc(80vh - 60px);max-height:500px;z-index:2;overflow-y:auto;box-shadow:0 5px 30px #0003;border-radius:20px;display:flex;flex-direction:column}.chat-header{flex:0 1 25px;position:relative;z-index:2;background:#1e90ff;color:#fff;text-transform:uppercase;text-align:left;padding:10px 0 9px 15px}.chat-header .title,.chat-header .sub-title{font-weight:500;font-size:14px;margin:0;padding:0;font-family:sans-serif}.chat-header .sub-title{color:#fff;font-size:10px;letter-spacing:1px;margin-top:5px}.chat-icon{position:absolute;left:15px}.chat-icon i{margin-top:3px;font-size:20px;color:#fff}.messages-content{margin-bottom:60px}.message-box{padding:10px;position:relative}.message-box .message-input{background:none;border:none;outline:none!important;resize:none;color:#000;font-size:14px;height:17px;margin:0;padding-right:20px;width:calc(100% - 80px);box-sizing:border-box}.message-box textarea:focus::-webkit-placeholder{color:transparent}.message-box .message-submit{position:absolute;top:50%;right:10px;transform:translateY(-50%);color:#fff;border:none;background:#1e90ff;font-size:10px;text-transform:uppercase;line-height:1;padding:6px 10px;border-radius:10px;cursor:pointer}.message-box .message-submit:hover{background:#1e90ff}.close-chat{position:absolute;top:15px;right:15px;color:#fff;cursor:pointer}.user-msg,.bot-msg{max-width:calc(100% - 20px);margin-top:10px;margin-left:10px;background-color:#1e90ff;color:#fff;padding:8px 12px;border-radius:15px;font-family:sans-serif;font-size:15px;overflow-wrap:break-word}.bot-msg{float:left}.user-msg{float:right}.chat-typing{margin:10px 0 0 10px;float:left;padding-bottom:10px}.chat-typing--bubbles span{display:inline-block;background-color:#b6b5ba;width:10px;height:10px;border-radius:100%;margin-right:5px;animation:bob 2s infinite}.chat-typing--bubbles span:nth-child(1){animation-delay:-1s}.chat-typing--bubbles span:nth-child(2){animation-delay:-.85s}.chat-typing--bubbles span:nth-child(3){animation-delay:-.7s;margin-right:0}@keyframes bob{10%{transform:translateY(-10px);background-color:#9e9da2}50%{transform:translateY(0);background-color:#b6b5ba}}::-webkit-scrollbar{width:5px}::-webkit-scrollbar-track{background:#888;border-radius:5px}::-webkit-scrollbar-thumb{background:#504e4e;border-radius:5px}::-webkit-scrollbar-thumb:hover{background:#555;border-radius:5px}.noselect{-webkit-touch-callout:none;-webkit-user-select:none;user-select:none}\\n\"] }]\n        }], propDecorators: { myScrollContainer: [{\n                type: ViewChild,\n                args: ['autoScroll', { static: true }]\n            }], chatConfig: [{\n                type: Input\n            }], serverResponse: [{\n                type: Input\n            }], onMessageInput: [{\n                type: Output\n            }] } });\n\nclass NgChatbotAngularModule {\n    static { this.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule }); }\n    static { this.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"14.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularModule, declarations: [NgChatbotAngularComponent], imports: [CommonModule,\n            BrowserModule,\n            FormsModule], exports: [NgChatbotAngularComponent] }); }\n    static { this.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularModule, imports: [CommonModule,\n            BrowserModule,\n            FormsModule] }); }\n}\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"16.2.12\", ngImport: i0, type: NgChatbotAngularModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    declarations: [NgChatbotAngularComponent],\n                    imports: [\n                        CommonModule,\n                        BrowserModule,\n                        FormsModule\n                    ],\n                    exports: [NgChatbotAngularComponent]\n                }]\n        }] });\n\n/*\n * Public API Surface of ng-chatbot-angular\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { NgChatbotAngularComponent, NgChatbotAngularModule };\n//# sourceMappingURL=ng-chatbot-angular.mjs.map\n","map":null,"preliminaryFileName":"ng-chatbot-angular.mjs","sourcemapFileName":"ng-chatbot-angular.mjs.map"},{"fileName":"ng-chatbot-angular.mjs.map","needsCodeReference":false,"source":"{\"version\":3,\"file\":\"ng-chatbot-angular.mjs\",\"sources\":[\"../../../projects/ng-chatbot-angular/src/lib/ng-chatbot-angular.component.ts\",\"../../../projects/ng-chatbot-angular/src/lib/ng-chatbot-angular.component.html\",\"../../../projects/ng-chatbot-angular/src/lib/ng-chatbot-angular.module.ts\",\"../../../projects/ng-chatbot-angular/src/public-api.ts\",\"../../../projects/ng-chatbot-angular/src/ng-chatbot-angular.ts\"],\"sourcesContent\":[\"import { Component, OnInit, ElementRef, ViewChild, Input, Output, EventEmitter } from '@angular/core';\\r\\nimport { ChatConfig } from './chat-config';\\r\\nimport { Message } from './message'; // Import the updated Message interface\\r\\n\\r\\n@Component({\\r\\n  selector: 'ng-chatbot-angular',\\r\\n  templateUrl: './ng-chatbot-angular.component.html',\\r\\n  styleUrls: ['./ng-chatbot-angular.component.css']\\r\\n})\\r\\nexport class NgChatbotAngularComponent implements OnInit {\\r\\n  @ViewChild('autoScroll', { static: true }) private myScrollContainer!: ElementRef;\\r\\n  @Input() chatConfig: ChatConfig | undefined;\\r\\n  @Input() set serverResponse(value: string) {\\r\\n    this.addServerResponse(value);\\r\\n  }\\r\\n  @Output() onMessageInput: EventEmitter<any> = new EventEmitter<any>();\\r\\n\\r\\n  messages: Message[] = [];\\r\\n  userMessage = '';\\r\\n  isModalActive = false;\\r\\n  isBotActive = false;\\r\\n  isButtonVisible = true; \\r\\n\\r\\n  ngOnInit(): void {\\r\\n    this.messages = [];\\r\\n  }\\r\\n\\r\\n  showDialog() {\\r\\n    this.isModalActive = true;\\r\\n    this.isButtonVisible = false; \\r\\n    let modal_t = document.getElementById('chat_modal');\\r\\n    modal_t?.classList.remove('hidden-chat');\\r\\n    modal_t?.classList.add('show-chat');\\r\\n  }\\r\\n\\r\\n  closeDialog() {\\r\\n    this.isModalActive = false;\\r\\n    this.isButtonVisible = true; \\r\\n    let modal_t = document.getElementById('chat_modal');\\r\\n    modal_t?.classList.remove('show-chat');\\r\\n    modal_t?.classList.add('hidden-chat');\\r\\n  }\\r\\n\\r\\n  pushData() {\\r\\n    if (this.userMessage.trim() !== '') {\\r\\n      this.onMessage(this.userMessage);\\r\\n      this.messages.push({ type: 'user', message: this.userMessage });\\r\\n      this.userMessage = '';\\r\\n      this.isBotActive = true;\\r\\n      this.scrollToBottom(); // Add this line to scroll to bottom after adding user message\\r\\n    }\\r\\n  }\\r\\n\\r\\n  addServerResponse(serverResponse: string) {\\r\\n    const newMessage: Message = { type: 'bot', message: serverResponse, loading: true }; \\r\\n    this.messages.push(newMessage);\\r\\n    this.isBotActive = false;\\r\\n    this.scrollToBottom(); // Add this line to scroll to bottom after adding server response\\r\\n\\r\\n    setTimeout(() => {\\r\\n      newMessage.loading = false; \\r\\n      this.scrollToBottom(); \\r\\n    }, 1000); \\r\\n  }\\r\\n\\r\\n  scrollToBottom(): void {\\r\\n    try {\\r\\n      setTimeout(() => {\\r\\n        if (this.myScrollContainer) {\\r\\n          const scrollContainer = this.myScrollContainer.nativeElement;\\r\\n          scrollContainer.scrollTop = scrollContainer.scrollHeight;\\r\\n          scrollContainer.scrollIntoView({ behavior: \\\"smooth\\\", block: \\\"end\\\", inline: \\\"nearest\\\" });\\r\\n        }\\r\\n      }, 100);\\r\\n    } catch (err) {\\r\\n      console.error(err);\\r\\n    }\\r\\n  }\\r\\n\\r\\n  public onMessage(date: any): void {\\r\\n    this.onMessageInput.emit(date.trim());\\r\\n  }\\r\\n}\\r\\n\",\"<section class=\\\"noselect container\\\">\\r\\n  <div id=\\\"chat_modal\\\" class=\\\"hidden-chat\\\">\\r\\n    <div class=\\\"chat\\\">\\r\\n      <div chatConfig class=\\\"chat-header\\\" *ngIf=\\\"chatConfig && (chatConfig.title || chatConfig.subTitle)\\\">\\r\\n        <div class=\\\"chat-icon\\\">\\r\\n          <i class=\\\"fa fa-user-circle-o\\\" aria-hidden=\\\"true\\\"></i>\\r\\n        </div>\\r\\n        <p class=\\\"title\\\" *ngIf=\\\"chatConfig.title\\\">{{ chatConfig.title }}</p>\\r\\n        <p class=\\\"sub-title\\\" *ngIf=\\\"chatConfig.subTitle\\\">{{ chatConfig.subTitle }}</p>\\r\\n        <span (click)=\\\"closeDialog()\\\" class=\\\"close-chat\\\">\\r\\n          <i class=\\\"fa fa-times\\\"></i>\\r\\n        </span>\\r\\n      </div>\\r\\n      <div #autoScroll class=\\\"messages-content\\\">\\r\\n        <div *ngFor=\\\"let msg of messages\\\">\\r\\n          <label [ngClass]=\\\"msg.type == 'user' ? 'user-msg' : 'bot-msg'\\\">\\r\\n            {{ msg.message }}\\r\\n          </label>\\r\\n        </div>\\r\\n        <div class=\\\"chat-typing\\\" *ngIf=\\\"isBotActive\\\">\\r\\n          <div class=\\\"chat-typing--bubbles\\\">\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n            <span></span>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n      <div class=\\\"message-footer\\\">\\r\\n        <div class=\\\"message-box\\\">\\r\\n          <input type=\\\"text\\\" (keydown.enter)=\\\"pushData()\\\" [(ngModel)]=\\\"userMessage\\\" class=\\\"message-input\\\" placeholder=\\\"Type message...\\\" />\\r\\n          <div type=\\\"submit\\\" class=\\\"noselect message-submit\\\" (click)=\\\"pushData()\\\">\\r\\n            <i class=\\\"fa fa-paper-plane\\\"></i>\\r\\n          </div>\\r\\n        </div>\\r\\n      </div>\\r\\n    </div>\\r\\n  </div>\\r\\n\\r\\n  <div class=\\\"float-buton-group noselect\\\" *ngIf=\\\"isButtonVisible\\\">\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"!isModalActive\\\" (click)=\\\"showDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-comment\\\"></i>\\r\\n    </div>\\r\\n    <div class=\\\"float-button\\\" *ngIf=\\\"isModalActive\\\" (click)=\\\"closeDialog()\\\">\\r\\n      <i class=\\\"float-icon fa fa-times-circle\\\"></i>\\r\\n    </div>\\r\\n  </div>\\r\\n</section>\\r\\n\",\"import { NgModule } from '@angular/core';\\r\\nimport { NgChatbotAngularComponent } from './ng-chatbot-angular.component';\\r\\nimport { CommonModule } from '@angular/common';\\r\\nimport { BrowserModule } from '@angular/platform-browser';\\r\\nimport { FormsModule } from '@angular/forms'\\r\\n\\r\\n@NgModule({\\r\\n  declarations: [NgChatbotAngularComponent],\\r\\n  imports: [\\r\\n    CommonModule,\\r\\n    BrowserModule,\\r\\n    FormsModule\\r\\n  ],\\r\\n  exports: [NgChatbotAngularComponent]\\r\\n})\\r\\nexport class NgChatbotAngularModule { }\\r\\n\",\"/*\\r\\n * Public API Surface of ng-chatbot-angular\\r\\n */\\r\\n\\r\\nexport * from './lib/ng-chatbot-angular.component';\\r\\nexport { NgChatbotAngularModule } from './lib/ng-chatbot-angular.module';\\r\\n\",\"/**\\n * Generated bundle index. Do not edit.\\n */\\n\\nexport * from './public-api';\\n\"],\"names\":[],\"mappings\":\"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\"}","type":"asset"}]}